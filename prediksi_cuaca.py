# -*- coding: utf-8 -*-
"""Prediksi Cuaca.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pu-BWBKnMfj7vU71te7VNLVcTS-uXmmQ

Data Set : https://drive.google.com/file/d/1fYpXOi5DD_WGbRPj1pw19GXbVsHg5bQz/view?usp=sharing
"""

#Import the libraries
import numpy as np
import pandas as pd

"""#Data Acquisition

"""

#Load the dataset
data = pd.read_csv("/content/seattle-weather.csv")

data.head()

"""#Data Exploration

Data Exploration adalah sebuah kegiatan yang bertujuan untuk lebih memahami karakteristik dari data.Data exploration adalah untuk dapat membantu kita untuk memilih tools yang tepat untuk melakukan preprocessing atau dalam melakukan analisis serta dapat digunakan untuk
mengetahui pola / pattern dari data.

Tiga teknik/metode dalam mengeksplorasi data, yaitu:
1. Summary Statistics
2. Visualization
3. Clustering dan Anomaly Detection
"""

data.info()

#Check for null values
data.isnull().sum()

#convert the data type into datetime
data['date'] = pd.to_datetime(data['date'])

data.nunique()

"""##Data Visualization

Data visualization mengubah kumpulan data menjadi hal lebih sederhana untuk ditampilkan (grafis atau visual).

Alasan melakukan data visualization:
1.   Manusia lebih mudah memahami dan menganalisis sesuatu yang ditampilkan secara visual.
2. Dapat mendeteksi trends dan pola (patterns) dari dataset.
3. Dapat mendeteksi outliers dan patterns yang tidak biasa.
"""

import matplotlib.pyplot as plt
import seaborn as sns

#menghitung cuaca
plt.figure(figsize=(10,5))
sns.set_theme()
sns.countplot(x = 'weather',data = data,palette="ch:start=.2,rot=-.3")
plt.xlabel("weather",fontweight='bold',size=13)
plt.ylabel("Count",fontweight='bold',size=13)
plt.show()

#mengetahui temperatur maksimal dalam setiap hari
plt.figure(figsize=(18,8))
sns.set_theme()
sns.lineplot(x = 'date',y='temp_max',data=data)
plt.xlabel("Date",fontweight='bold',size=13)
plt.ylabel("Temp_Max",fontweight='bold',size=13)
plt.show()

#mengetahui temperatur minimal dalam setiap hari
plt.figure(figsize=(18,8))
sns.set_theme()
sns.lineplot(x = 'date',y='temp_min',data=data)
plt.xlabel("Date",fontweight='bold',size=13)
plt.ylabel("Temp_Min",fontweight='bold',size=13)
plt.show()

#mengetahui cuaca sedang berangin 
plt.figure(figsize=(18,8))
sns.set_theme()
sns.lineplot(x = 'date',y='wind',data=data)
plt.xlabel("Date",fontweight='bold',size=13)
plt.ylabel("wind",fontweight='bold',size=13)
plt.show()

#mengetahui perubahan cuaca dalam berbagai kondisi
plt.figure(figsize=(14,8))
sns.pairplot(data.drop('date',axis=1),hue='weather',palette="YlOrBr")
plt.show()

#melakukan labeling terhadap kolom weater
def LABEL_ENCODING(c1):
    from sklearn import preprocessing
    label_encoder = preprocessing.LabelEncoder()
    data[c1]= label_encoder.fit_transform(data[c1])
    data[c1].unique()
LABEL_ENCODING("weather")
data

data = data.drop('date',axis=1)

x = data.drop('weather',axis=1)
y = data['weather']

"""#Modelling

Membagi data set menjadi data testing dan data training
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""##Modelling : Logistic Regression"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
y_pred

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)

sns.heatmap(cm,annot=True)
plt.show()

acc1 = accuracy_score(y_test, y_pred)
print(f"Accuracy score: {acc1}")

"""##Modelling : SVM 

"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
print(cm)
acc2 = accuracy_score(y_test, y_pred)

print(f"Accuracy score: {acc2}")

"""##Modelling : KNN"""

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
print(cm)

acc3 = accuracy_score(y_test, y_pred)
print(f"Accuracy score: {acc3}")

"""##Modelling : Naive Bayes"""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
print(cm)

acc4 = accuracy_score(y_test, y_pred)
print(f"Accuracy score : {acc4}")

"""#Visualisasi dari semua model"""

mylist=[]
mylist2=[]
mylist.append(acc1)
mylist2.append("Logistic Regression")
mylist.append(acc2)
mylist2.append("SVM")
mylist.append(acc3)
mylist2.append("KNN")
mylist.append(acc4)
mylist2.append("Naive Bayes")

plt.rcParams['figure.figsize']=8,6
sns.set_style("darkgrid")
plt.figure(figsize=(22,8))
ax = sns.barplot(x=mylist2, y=mylist, palette = "mako", saturation =1.5)
plt.xlabel("Classification Models", fontsize = 20 )
plt.ylabel("Accuracy", fontsize = 20)
plt.title("Accuracy of different Classification Models", fontsize = 20)
plt.xticks(fontsize = 11, horizontalalignment = 'center', rotation = 8)
plt.yticks(fontsize = 13)
for p in ax.patches:
    width, height = p.get_width(), p.get_height()
    x, y = p.get_xy() 
    ax.annotate(f'{height:.2%}', (x + width/2, y + height*1.02), ha='center', fontsize = 'x-large')
plt.show()

"""Kesimpulan:
dari ke-4 model yang digunakan yang memiliki akurasi tertinggi dalam melakukan prediksi adalah algoritma naive bayes dengan akurasi yang siadaptkan sebesar 84.15%
"""